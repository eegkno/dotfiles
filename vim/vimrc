"Sources
" https://dougblack.io/words/a-good-vimrc.html
" https://github.com/nicknisi/dotfiles
" https://www.chrisatmachine.com/Neovim/02-vim-general-settings/
" https://www.chrisatmachine.com/Neovim/04-vim-coc/

" General {{{
    set autoread                            " Detect when a file is changed
    set history=1000                        " Change history to 1000
    set textwidth=120                       " Value for general files

    " Backups
    set undodir=~/.vim/.undo
    set backupdir=~/.vim/.backup
    set directory=~/.vim/.swp

    " Searching
    set ignorecase                          " Case insensitive searching
    set smartcase                           " Case sensitive if expression contains a capital letter
    set incsearch                           " Search as characters are entered
    set hlsearch                            " Highlight matches
    set magic                               " Set magic on, for regex
    " }}}

" Appearance  {{{

    set grepprg=grep\ -nH\ $*               " To generate always a filename
    set encoding=utf8                       " The encoding displayed
    set fileencoding=utf-8                  " The encoding written to file
    set number                              " Show line numbers
    set relativenumber                      " Show relative number in normal mode
    set laststatus=2                        " Show the status line all the time
    set noshowmode                          " Don't show which mode disabled for PowerLine
    set showmatch                           " Show matching braces
    set lbr                                 " Break the line by the space
    set ruler                               " Show line number and column number
    set showcmd                             " Show command in bottom bar
    set cmdheight=2                         " More space for displaying messages
    set cursorline                          " Highlight current line
    set wildmenu                            " Visual auto-complete for command menu
    set showmatch                           " Highlight matching [{()}]
    set lazyredraw                          " Redraw only when we need to.
    set t_Co=256                            " Explicitly tell vim that the terminal supports 256 colors
    set nocompatible                        " Behave like vim, not old vi
    set hidden                              " Navigate away from a modified file without first saving it
    set shell=$SHELL
    set nowrap                              " Don't automatically wrap on load
    set fo-=t                               " Don't automatically wrap text when typing
    set colorcolumn=100
    highlight ColorColumn ctermbg=23
    set spelllang=en_us                     " Enable English 'en_us', French 'fr' and Spanish is 'es' spell checks
    set spell
    set signcolumn=auto
    set pumheight=10                        " Makes pop-up menu smaller
    set iskeyword+=-                      	" Treat dash separated words as a word text object"
    set splitbelow                          " Horizontal splits will automatically be below
    set splitright                          " Vertical splits will automatically be to the right
    set conceallevel=0                      " So that I can see `` in markdown files
    set clipboard=unnamed                   " Use system clipboard
    set nobackup                            " This is recommended by coc
    set nowritebackup                       " This is recommended by coc
    set updatetime=300                      " Faster completion
    set timeoutlen=500                      " By default timeoutlen is 1000 ms
    set formatoptions-=cro                  " Stop newline continuation of comments

    " Tab control
    filetype plugin indent on               " Load file type-specific indent files
    set smarttab                            " Tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
    set tabstop=4                           " The visible width of tabs
    set softtabstop=4                       " Edit as if the tabs are 4 characters wide
    set shiftwidth=4                        " Number of spaces to use for indent and unindent
    set shiftround                          " Round indent to a multiple of 'shiftwidth'
    set expandtab                           " Insert spaces rather than tabs for <Tab>
    set modelines=1
    set autoindent                          " Automatically set indent of new line

    " code folding settings
    set foldenable                          " Enable folding
    set foldmethod=indent                   " Fold based on indent level
    set foldlevelstart=10                   " Open most folds by default
    set foldnestmax=10                      " Deepest fold is 10 levels
    set nofoldenable                        " Don't fold by default
    set foldlevel=1

    "highlight conflicts
    match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

    " path configuration
    set path=$PWD/**                        " Set your path variable to current directory

    " Python support
    let g:python3_host_prog = expand("/Applications/anaconda3/envs/nvim/bin/python")

" }}}


" Autocommands{{{
    autocmd VimResized * wincmd =
    " removing all trailing whitespace
    autocmd BufWritePre * %s/\s\+$//e
" }}}


"Loading plugins {{{
    " Plugins will be downloaded under the specified directory
    " (./.local/share/nvim/plugged).
    call plug#begin(has('nvim') ? stdpath('data') . '/plugged' : '~/.vim/plugged')

    " Declare the list of plugins.
    Plug 'jeffkreeftmeijer/vim-numbertoggle'
    Plug 'dhruvasagar/vim-zoom'
    "Plug 'tpope/vim-commentary'
    "Plug 'tpope/vim-abolish'
    Plug 'tpope/vim-surround'

    " Look and feel
    Plug 'catppuccin/vim', { 'as': 'catppuccin' }
    Plug 'folke/tokyonight.nvim'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'moll/vim-bbye'

    " Python
    Plug 'w0rp/ale'


    " List ends here. Plugins become visible to Vim after this call.
    call plug#end()

 "}}}


" General Mappings {{{

    let mapleader=","       " leader is comma

    " split navigations
    nnoremap <C-j> <C-w><C-j>
    nnoremap <C-k> <C-w><C-k>
    nnoremap <C-l> <C-w><C-l>
    nnoremap <C-h> <C-w><C-h>

    " fuzzy search
    nnoremap <C-p> :<C-u>FZF<CR>

    " scroll the viewport faster
    nnoremap <C-e> 5<C-e>
    nnoremap <C-y> 5<C-y>

    " turn off search highlight
    "nnoremap <leader><space> :nohlsearch<CR>
    nnoremap <space> :nohlsearch<CR>

    " highlight last inserted text
    nnoremap gV `[v`]

    " edit vimrc/zshrc and load vimrc bindings
    nnoremap <leader>ev :vsp $VIMRC<CR>
    nnoremap <leader>eb :vsp ~/.bashrc<CR>
    nnoremap <leader>ez :vsp ~/.zshrc<CR>
    nnoremap <leader>sv :source $VIMRC<CR>
    nnoremap k gk
    nnoremap j gj

    " buffer list
    nnoremap <PageUp> :bprevious<CR>
    nnoremap <PageDown> :bnext<CR>
    " nnoremap <silent> [B :bfirst<CR>
    " nnoremap <silent> ]B :blast<CR>

    " helpers for dealing with other people's code
    nmap \t :set ts=4 sts=4 sw=4 noet<cr>
    nmap \s :set ts=4 sts=4 sw=4 et<cr>

    " terminal mode
    if has('nvim')
        tnoremap <Esc> <C-\><C-n>
        tnoremap <C-v><Esc> <Esc>
    endif

    if has('nvim')
        highlight! link TermCursor Cursor
        highlight! TermCursorNC guibg=red guifg=white ctermbg=1 ctermfg=15
    endif

    " Preferred editor
    if has('nvim') && executable('nvr')
        let $VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
    endif

    " Close buffers but keep splits
    nmap <leader>d :Bdelete<cr>

    " Save the current buffer using the leader key
    noremap <Leader>w :w!<cr>

    " keep visual selection when indenting/outdenting
    vmap < <gv
    vmap > >gv

    " (useful for handling the permission-denied error)
    cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

"}}}

" Colorscheme and final setup {{{
    syntax on
    set background=dark
    "set termguicolors

    "let g:tokyonight_style = 'storm' " available: night, storm
    "let g:tokyonight_enable_italic = 1
    "let g:tokyonight_cursor = 'green'
    colorscheme tokyonight
    "colorscheme PaperColor
    "colorscheme codedark
    "colorscheme catppuccin_latte
    highlight Search ctermfg=yellow

"}}}

" }}}
" Airline {{{
    let g:airline_theme='tokyonight'
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#formatter = 'default'
    let g:airline#extensions#tabline#buffer_nr_show = 1

" }}}

" ale options {{{
    " Check Python files with flake8 and pylint.
    let b:ale_linters = {'python': ['pylint', 'pydocstyle']}

    " Fix Python files with autopep8 and yapf.
    let b:ale_fixers = {'*':['remove_trailing_lines', 'trim_whitespace'], 'python': ['black']}

    let g:ale_python_flake8_options = '--ignore=E129,E501,E302,E265,E241,E305,E402,W503'
    let g:ale_python_pylint_options = '-j 0 --max-line-length=100'
    let g:ale_list_window_size = 5
    let g:ale_sign_column_always = 0
    let g:ale_open_list = 0
    let g:ale_keep_list_window_open = '1'
    "let g:ale_fix_on_save = 1
    let g:ale_set_highlights = 1
    " Disable warnings about trailing whitespace for Python files.
    let g:ale_warn_about_trailing_whitespace = 1
    let g:ale_warn_about_trailing_blank_lines = 1
    let g:ale_set_balloons = 1
    let g:ale_completion_enabled = 1
    let g:ale_close_preview_on_insert = 1
    let g:ale_sign_error = '‼'
    let g:ale_sign_warning = '∙'
    let g:ale_lint_on_text_changed = 'always'
    let g:ale_lint_on_enter = '1'
    let g:ale_lint_on_save = '1'
    let g:ale_lint_on_filetype_changed = 1
    let g:ale_disable_lsp = 1

    " Mappings
    nmap <silent> ++ <Plug>(ale_previous)
    nmap <silent> -- <Plug>(ale_next)
    "nmap <silent> +W <Plug>(ale_first)
    "nmap <silent> -W <Plug>(ale_last)
"}}}

" Python {{{
    " PEP 8
        au BufNewFile,BufRead *.py
            \ set tabstop=4 |
            \ set softtabstop=4 |
            \ set shiftwidth=4 |
            \ set textwidth=100 |
            \ set expandtab |
            \ set autoindent |
            \ set nowrap |
            \ set fileformat=unix

    " Flagging Unnecessary Whitespace
        highlight BadWhitespace ctermbg=red guibg=darkred
        au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

    " Syntax Checking/Highlighting
        let python_highlight_all=1
        autocmd FileType python setlocal omnifunc=python3complete#Complete nospell


" Netrw {{{
" https://blog.stevenocchipinti.com/2016/12/28/using-netrw-instead-of-nerdtree-for-vim/
    let g:netrw_banner = 0
    let g:netrw_liststyle = 3
" }}}

" Format JSON files{{{
    nmap =j :%!python -m json.tool<CR>
" }}}

